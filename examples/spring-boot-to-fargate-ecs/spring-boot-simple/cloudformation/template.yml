AWSTemplateFormatVersion: '2010-09-09'
Description: Deploy a service on AWS Fargate, hosted in a private subnet, but accessible via a public load balancer.
Parameters:
  GroupId:
    Type: String
    Default: '@{project.groupId}'
  ArtifactId:
    Type: String
    Default: '@{project.artifactId}'
  ArtifactVersion:
    Type: String
    Default: '@{project.version}-@{build.number}'
  ContainerPort:
    Type: Number
    # Needs to match container expose port.
    Default: 8080
  ECR:
    Type: String
    Default: '@{aws.ecr.account.id}.dkr.ecr.@{aws.region}.amazonaws.com'
  Environment:
    Type: String
    Default: '@{aws.stack.env}'
  Prefix:
    Type: String
    Default: '@{aws.stack.prefix}'
  ContainerCpu:
    Type: Number
    Default: 512
    Description: How much CPU to give the container. 1024 is 1 CPU
  ContainerMemory:
    Type: Number
    Default: 1024
    Description: How much memory in megabytes to give the container
  Path:
    Type: String
    Default: "*"
    Description: A path on the public load balancer that this service
      should be connected to. Use * to send all load balancer
      traffic to this service.
  
  DesiredCount:
    Type: Number
    Default: 2
    Description: How many copies of the service task to run

  Priority:
    Type: Number
    Default: 10
    Description: The priority for the routing rule added to the load balancer.
      This only applies if your have multiple services which have been
      assigned to different paths on the load balancer.

Resources:

  TaskRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
        -
          Effect: Allow
          Principal:
            Service:
            - "ecs-tasks.amazonaws.com"
          Action: "sts:AssumeRole"
  # The task definition. This is a simple metadata description of what
  # container to run, and what resource requirements it has.
  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Ref 'ArtifactId'
      Cpu: !Ref 'ContainerCpu'
      Memory: !Ref 'ContainerMemory'
      NetworkMode: awsvpc
      RequiresCompatibilities:
      - FARGATE
      ExecutionRoleArn:
        Fn::ImportValue: "@{aws.stack.prefix}cloudformation-alb-ECSTaskExecutionRole"
      TaskRoleArn: !GetAtt TaskRole.Arn
      ContainerDefinitions:
      - Name: !Ref 'ArtifactId'
        Cpu: !Ref 'ContainerCpu'
        Memory: !Ref 'ContainerMemory'
        Image: !Sub '${ECR}/${GroupId}-${ArtifactId}:${ArtifactVersion}'
        PortMappings:
        - ContainerPort: !Ref 'ContainerPort'
        LogConfiguration:
          LogDriver: awslogs
          Options:
            awslogs-group: !ImportValue "@{aws.stack.prefix}cloudformation-alb-LogGroupName"
            awslogs-region: !Ref AWS::Region
            awslogs-stream-prefix: !Ref 'ArtifactId'

  # The service. The service is a resource which allows you to run multiple
  # copies of a type of task, and gather up their logs and metrics, as well
  # as monitor the number of running tasks and replace any that have crashed
  Service:
    Type: AWS::ECS::Service
    DependsOn: LoadBalancerRule
    Properties:
      ServiceName: !Ref 'ArtifactId'
      Cluster: !ImportValue "@{aws.stack.prefix}cloudformation-alb-ClusterName"
      LaunchType: FARGATE
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 75
      DesiredCount: !Ref 'DesiredCount'
      NetworkConfiguration:
        AwsvpcConfiguration:
          SecurityGroups:
          - !ImportValue "@{aws.stack.prefix}cloudformation-alb-FargateContainerSecurityGroup"
          Subnets:
          - !ImportValue "@{aws.stack.prefix}cloudformation-vpc-PrivateSubnetOne"
          - !ImportValue "@{aws.stack.prefix}cloudformation-vpc-PrivateSubnetTwo"
      TaskDefinition: !Ref 'TaskDefinition'
      LoadBalancers:
      - ContainerName: !Ref 'ArtifactId'
        ContainerPort: !Ref 'ContainerPort'
        TargetGroupArn: !Ref 'TargetGroup'

  # A target group. This is used for keeping track of all the tasks, and
  # what IP addresses / port numbers they have. You can query it yourself,
  # to use the addresses yourself, but most often this target group is just
  # connected to an application load balancer, or network load balancer, so
  # it can automatically distribute traffic across all the targets.
  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 10
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      TargetType: ip
      Name: !Ref 'ArtifactId'
      Port: !Ref 'ContainerPort'
      Protocol: HTTP
      UnhealthyThresholdCount: 3
      VpcId: !ImportValue "@{aws.stack.prefix}cloudformation-vpc-VPCId"
      TargetGroupAttributes:
      - Key: deregistration_delay.timeout_seconds
        Value: 60



  # Create a rule on the load balancer for routing traffic to the target group
  LoadBalancerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
      - TargetGroupArn: !Ref 'TargetGroup'
        Type: 'forward'
      Conditions:
      - Field: path-pattern
        Values: [!Ref 'Path']
      ListenerArn: !ImportValue "@{aws.stack.prefix}cloudformation-alb-PublicListener"
      Priority: !Ref 'Priority'
